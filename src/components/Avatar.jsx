/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 oculus.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useControls } from 'leva';
import { useFrame, useLoader } from '@react-three/fiber';
import * as THREE from 'three'



// const corresponding = {
//   // A: "viseme_aa",
//   // B: "viseme_E",
//   // C: "viseme_I",
//   // D: "viseme_O",
//   // E: "viseme_U",
//   // F: "viseme_FF",
//   // G: "viseme_FF",
//   // H: "viseme_TH",
//   // X: "viseme_sil",
//   'A': 'viseme_aa',      // as in 'father'
//     'B': 'viseme_E',       // as in 'bet'
//     'C': 'viseme_I',       // as in 'sit'
//     'D': 'viseme_O',       // as in 'pot'
//     'E': 'viseme_U',       // as in 'boot'
//     'F': 'viseme_FF',      // as in 'foot'
//     'G': 'viseme_U',       // as in 'good'
//     'H': 'viseme_E',       // as in 'hat'
//     'I': 'viseme_aa',      // as in 'eye'
//     'J': 'viseme_I',       // as in 'jet'
//     'K': 'viseme_kk',      // as in 'kick'
//     'L': 'viseme_nn',      // as in 'look'
//     'M': 'viseme_PP',      // as in 'mom'
//     'N': 'viseme_nn',      // as in 'no'
//     'O': 'viseme_O',       // as in 'open'
//     'P': 'viseme_PP',      // as in 'pop'
//     'Q': 'viseme_kk',      // as in 'quick'
//     'R': 'viseme_RR',      // as in 'run'
//     'S': 'viseme_SS',      // as in 'sit'
//     'T': 'viseme_TH',      // as in 'top'
//     'U': 'viseme_U',       // as in 'under'
//     'V': 'viseme_FF',      // as in 'victory'
//     'W': 'viseme_U',       // as in 'water'
//     'X': 'viseme_sil',     // silence or pause
//     'Y': 'viseme_I',       // as in 'yes'
//     'Z': 'viseme_SS',      // as in 'zebra'
//     'CH': 'viseme_CH',     // as in 'chip'
//     'SH': 'viseme_SH',     // as in 'ship'
//     'TH': 'viseme_TH',     // as in 'this'
//     'AA': 'viseme_aa',     // as in 'car'
//     'AE': 'viseme_E',      // as in 'cat'
//     'AH': 'viseme_aa',     // as in 'but'
//     'AO': 'viseme_O',      // as in 'thought'
//     'AW': 'viseme_O',      // as in 'how'
//     'AY': 'viseme_aa',     // as in 'my'
//     'EH': 'viseme_E',      // as in 'bed'
//     'ER': 'viseme_RR',     // as in 'her'
//     'EY': 'viseme_E',      // as in 'they'
//     'IH': 'viseme_I',      // as in 'sit'
//     'IY': 'viseme_I',      // as in 'see'
//     'OW': 'viseme_O',      // as in 'go'
//     'OY': 'viseme_O',      // as in 'boy'
//     'UH': 'viseme_U',      // as in 'book'
//     'UW': 'viseme_U',      // as in 'blue'
//     'sil': 'viseme_sil',   // silence
// }

const corresponding = {
  "b": "viseme_PP",
  "d": "viseme_DD",
  "d͡ʒ": "viseme_CH",
  "ð": "viseme_TH",
  "f": "viseme_FF",
  "ɡ": "viseme_kk",
  "h": "viseme_sil", // no specific viseme, use silence
  "j": "viseme_I", // closest approximation
  "k": "viseme_kk",
  "l": "viseme_RR",
  "m": "viseme_PP",
  "n": "viseme_nn",
  "ŋ": "viseme_nn", // closest approximation
  "p": "viseme_PP",
  "ɹ": "viseme_RR",
  "s": "viseme_SS",
  "ʃ": "viseme_SS",
  "t": "viseme_DD",
  "t͡ʃ": "viseme_CH",
  "θ": "viseme_TH",
  "v": "viseme_FF",
  "w": "viseme_U", // closest approximation
  "z": "viseme_SS",
  "ʒ": "viseme_SS",
  "ə": "viseme_sil", // mid-central vowel, use silence
  "ɚ": "viseme_sil", // mid-central vowel, use silence
  "æ": "viseme_aa",
  "aɪ": "viseme_aa",
  "aʊ": "viseme_aa",
  "ɑ": "viseme_aa",
  "eɪ": "viseme_E",
  "ɝ": "viseme_E",
  "ɛ": "viseme_E",
  "i": "viseme_I",
  "ɪ": "viseme_I",
  "oʊ": "viseme_O",
  "ɔ": "viseme_O",
  "ɔɪ": "viseme_O",
  "u": "viseme_U",
  "ʊ": "viseme_U",
  "ʌ": "viseme_E",
  "ˈ": "viseme_sil", // stress markers, use silence
  "ˌ": "viseme_sil",
  ".": "viseme_sil"
}



export function Avatar(props) {
  const { nodes, materials } = useGLTF('/../oculus.glb')


//   const [text, setText] = useState('');
//   const [audioUrl, setAudioUrl] = useState('');

//   const handleChange = (event) => {
//     setText(event.target.value);
//   };


//   const jsonObjects = [];
//   let audio;
//   const handleSubmit = async (event) => {
//     event.preventDefault();

//     const paramsMp3 = {
//         OutputFormat: 'mp3',
//         Text: text,
//         VoiceId: 'Brian', // You can change to another voice ID,
//     };
//     const paramsJson = {
//         OutputFormat: 'json',
//         Text: text,
//         VoiceId: 'Brian', // You can change to another voice ID,
//         SpeechMarkTypes: ['viseme']
//     };

//     try {
//         const commandMp3 = new SynthesizeSpeechCommand(paramsMp3);
//         const commandJson = new SynthesizeSpeechCommand(paramsJson);

//         // const dataMp3 = await pollyClient.send(commandMp3);
//         // const dataJson = await pollyClient.send(commandJson);
//         const [dataMp3, dataJson] = await Promise.all([
//             pollyClient.send(commandMp3),
//             pollyClient.send(commandJson)
//           ]);
//         // console.log("dataaa: ", data)
        
//         const audioBytes = await dataMp3.AudioStream.transformToByteArray();
//         const jsonString = await dataJson.AudioStream.transformToString('utf-8');

//         // console.log("json: ", typeof jsonString)
//         const jsonStrings = jsonString.trim().split('\n');
        
//         jsonStrings.forEach(json => {
//             const obj = JSON.parse(json);
//             jsonObjects.push(obj);
//           });

//         console.log(jsonObjects);
//         const blob = new Blob([audioBytes], { type: 'audio/mp3' });
//         const audioUrl = URL.createObjectURL(blob);
//         // console.log("URL: ", audioUrl)
//         // saveAs(blob, 'hello.mp3')
//         // setAudioUrl(audioUrl)
//         audio = new Audio(audioUrl);
//         audio.play()
//     } catch (error) {
//         console.error('Error generating audio:', error);
//     }
// };
  
  // const { playAudio } = useControls({
  //   playAudio: false
  // })

  // const audio = useMemo(() => new Audio('/audio/adam.mp3'))
  // const jsonFile = useLoader(THREE.FileLoader, '/audio/welcom.json')
  // const lipsync = JSON.parse(jsonFile)



  let audioUrl = props.audioUrl
  
  let jsonObjects = props.jsonObjects
  // let tempList = [{time: 0, type: '', value: ''}]
  // jsonObjects = tempList.concat(jsonObjects)
  console.log("json objects avatar: ", jsonObjects)
  console.log("audio urlll avatar: ", audioUrl)
  // if(audioUrl && jsonObjects){


  const audioRef = useRef(null);

  useEffect(() => {
    if (audioUrl) {
      audioRef.current = new Audio(audioUrl);
      audioRef.current.play();
    }
  }, [audioUrl]);


    let audio = new Audio(audioUrl)
    console.log('inside')
    // audio.play()
    useFrame(() => {

      if (audioRef.current) {
        const currentAudioTime = audioRef.current.currentTime*1000;
        // console.log('current time: ', currentAudioTime)
        // console.log('current time: ', typeof currentAudioTime)
        Object.values(corresponding).forEach((value) => {
          nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]] = 0
          nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]] = 0

        })
        // let start = 0;
        for(let i=1; i< jsonObjects.length; i++){
          // console.log("object length: ", jsonObjects.length)
          const mouthCue = jsonObjects[i]

          const previous_mouthCue = jsonObjects[i-1]
          if(currentAudioTime >= previous_mouthCue.time && currentAudioTime <= mouthCue.time){
            console.log(mouthCue.value)
            // start = mouthCue.time
            nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]] = .8
            nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]] = .8
          }
        }
      }
    })
  // }

  // useEffect(() => {
  //     if(playAudio){
  //         audio.play()
  //     }else{
  //         audio.pause()
  //     }
  // }, [playAudio])



  // useEffect(() => {
  //   console.log('dictionary: ', nodes.Wolf3D_Head.morphTargetDictionary["viseme_O"])
  //   nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["viseme_O"]] = .7
  //   nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary["viseme_O"]] = .7
  // }, [])


  return (
    
    
    <group {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
   
  
  )
}

useGLTF.preload('/../oculus.glb')
