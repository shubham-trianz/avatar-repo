/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/avatar_avrkit_oculus.glb -o src/components2/Avatar.jsx 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useControls } from 'leva';
import { useFrame, useLoader } from '@react-three/fiber';
import * as THREE from 'three'

const corresponding = {
  '@': 'viseme_sil',
  'E': 'viseme_E',
  'O': 'viseme_O',
  'S': 'viseme_SS',
  'T': 'viseme_TH',
  'a': 'viseme_aa',
  'e': 'viseme_E',
  'f': 'viseme_FF',
  'i': 'viseme_I',
  'k': 'viseme_kk',
  'l': 'viseme_nn',
  'o': 'viseme_O',
  'p': 'viseme_PP',
  'r': 'viseme_RR',
  's': 'viseme_SS',
  't': 'viseme_DD',
  'u': 'viseme_U'
}

// const corresponding = {
//   '@': ['viseme_sil'],
//   'E': ['viseme_E'],
//   'O': ['viseme_O'],
//   'S': ['viseme_SS'],
//   'T': ['viseme_TH'],
//   'a': ['viseme_aa'],
//   'e': ['viseme_E'],
//   'f': ['viseme_FF'],
//   'i': ['viseme_I'],
//   'k': ['viseme_kk'],
//   'l': ['viseme_nn'],
//   'o': ['viseme_O'],
//   'p': ['viseme_PP'],
//   'r': ['viseme_RR'],
//   's': ['viseme_SS'],
//   't': ['viseme_DD'],
//   'u': ['viseme_U']
// }

export function Avatar(props) {
  const { nodes, materials } = useGLTF('public/models/avatar_avrkit_oculus.glb')
  // const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  // const { nodes, materials } = useGraph(clone)

  let audioUrl = props.audioUrl
  
  let jsonObjects = props.jsonObjects
  // let tempList = [{time: 0, type: '', value: ''}]
  // jsonObjects = tempList.concat(jsonObjects)
  console.log("json objects avatar: ", jsonObjects)
  console.log("audio urlll avatar: ", audioUrl)
  // if(audioUrl && jsonObjects){
  
  const leftArmRef = useRef();
  const rightArmRef = useRef();


  const audioRef = useRef(null);

  useEffect(() => {
    if (audioUrl) {
      audioRef.current = new Audio(audioUrl);
      audioRef.current.play();
    }
  }, [audioUrl]);

  useEffect(() => {
    console.log('morph targets: ', nodes.Wolf3D_Head.morphTargetDictionary)
    console.log('morph influence: ', nodes.Wolf3D_Head.morphTargetInfluences)
    // nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyeBlinkLeft"]] = .1
  },[])

    let audio = new Audio(audioUrl)
    console.log('inside')
    // audio.play()
    useFrame(() => {

      if (audioRef.current) {
        const currentAudioTime = audioRef.current.currentTime*1000;
        // console.log('current time: ', currentAudioTime)
        // console.log('current time: ', typeof currentAudioTime)
        Object.values(corresponding).forEach((value) => {
          nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]] = 0
          nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]] = 0

        })
        // let start = 0;
        for(let i=1; i< jsonObjects.length; i++){
          // console.log("object length: ", jsonObjects.length)
          const mouthCue = jsonObjects[i]

          const previous_mouthCue = jsonObjects[i-1]
          if(currentAudioTime >= previous_mouthCue.time && currentAudioTime <= mouthCue.time){
            // console.log(mouthCue.value)
            
            // start = mouthCue.time
            for(let j=0; j<7; j++){

              nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]] = 0.1*(j+1)
              nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]] = 0.1*(j+1)
               
              // for(let i=0; i<corresponding[mouthCue.value].length; i++){

              

              //   nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value][i]]] = .3
              //   nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value][i]]] = .3
              // // nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary["eyesBlinkLeft"]] = .5
              // }
            }
                     }
        }
      }
     
    })
  return (
    <group {...props} dispose={null}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Glasses.geometry} material={materials.Wolf3D_Glasses} skeleton={nodes.Wolf3D_Glasses.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/avatar_avrkit_oculus.glb')
